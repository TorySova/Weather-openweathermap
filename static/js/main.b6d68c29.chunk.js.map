{"version":3,"sources":["components/Weather.module.css","components/DataWeather.module.css","redux/apiWeather.ts","redux/weatherReducer.ts","components/DataWeather.tsx","common/—Pngtree—search vector icon_4017384.png","common/pngwing.com.png","components/Weather.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["module","exports","axiosInstance","axios","create","baseURL","WeatherAPI","searchName","get","initState","data","weather","main","temp","feels_like","temp_min","temp_max","pressure","humidity","wind","speed","deg","clouds","all","dt","sys","type","id","country","sunrise","sunset","timezone","name","cod","error","DataWeather","cityName","useSelector","store","description","map","it","className","s","weatherWrap","Math","round","Weather","useState","setDate","useEffect","setInterval","Date","dispatch","useDispatch","setSearchName","searchCity","then","res","newData","catch","weatherTC","searchWrap","logo","src","pngwing","alt","search","input","value","placeholder","onChange","e","currentTarget","onKeyPress","key","button","onClick","contentWrap","App","toLocaleTimeString","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","state","action","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b6d68c29.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Weather_main__-bMzg\",\"logo\":\"Weather_logo__2YqFT\",\"searchWrap\":\"Weather_searchWrap__KzBKa\",\"search\":\"Weather_search__3pCJR\",\"input\":\"Weather_input__1rr0Z\",\"button\":\"Weather_button__3K-aR\",\"contentWrap\":\"Weather_contentWrap__1mLgG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"weatherWrap\":\"DataWeather_weatherWrap__3ZXf6\",\"temp\":\"DataWeather_temp__3yNYq\",\"cityName\":\"DataWeather_cityName__3XzV1\",\"description\":\"DataWeather_description__38Qrk\",\"feels_like\":\"DataWeather_feels_like__3QYbP\",\"error\":\"DataWeather_error__1Vkaj\"};","import axios from \"axios\";\r\n\r\nconst openweathermap = {\r\n    baseURL: 'http://api.openweathermap.org/'\r\n}\r\nconst key = '1b787d6883c1ca1bb99d157ad0052edb';\r\nconst axiosInstance = axios.create(openweathermap);\r\n\r\nexport const WeatherAPI = {\r\n    searchCity(searchName: string){\r\n        return axiosInstance.get(`data/2.5/weather?q=${searchName}&appid=${key}&lang=ru&units=metric`)\r\n    }\r\n}","import { WeatherAPI } from './apiWeather';\r\nimport { Dispatch } from \"redux\";\r\n\r\nexport type weatherType = {\r\n    id: number|null\r\n    main: string\r\n    description: string\r\n    icon: string\r\n}[]\r\nexport type mainType = {\r\n    temp: number|null\r\n    feels_like: number|null\r\n    temp_min: number|null\r\n    temp_max: number|null\r\n    pressure: number|null\r\n    humidity: number|null\r\n}\r\nexport type windType = {\r\n    speed: number|null\r\n    deg: number|null\r\n}\r\nexport type cloudsType = {\r\n    all: number|null\r\n}\r\nexport type sysType = {\r\n    type: number|null\r\n    id: number|null\r\n    country: string,\r\n    sunrise: number|null\r\n    sunset: number|null\r\n}\r\n\r\nexport type dataStateType = {\r\n    weather: weatherType\r\n    main: mainType\r\n    wind: windType\r\n    clouds: cloudsType\r\n    dt: number|null\r\n    sys: sysType\r\n    timezone: number|null\r\n    id: number|null\r\n    name: string\r\n    cod: number|null\r\n}\r\nexport type initStateType = {\r\n    data: dataStateType\r\n    error: string\r\n}\r\n\r\nconst initState: initStateType = {\r\n    data: {\r\n        weather: [],\r\n        main: {\r\n            temp: null,\r\n            feels_like: null,\r\n            temp_min: null,\r\n            temp_max: null,\r\n            pressure: null,\r\n            humidity: null,\r\n        },\r\n        wind: {\r\n            speed: null,\r\n            deg: null\r\n        },\r\n        clouds: {\r\n            all: null\r\n        },\r\n        dt: null,\r\n        sys: {\r\n            type: null,\r\n            id: null,\r\n            country: '',\r\n            sunrise: null,\r\n            sunset: null,\r\n        },\r\n        timezone: null,\r\n        id: null,\r\n        name: '',\r\n        cod: null\r\n    },\r\n    error: ''\r\n\r\n\r\n};\r\n\r\nexport const weatherReducer = (state = initState, action: actionType): initStateType => {\r\n    switch (action.type) {\r\n        case \"SET_CITY_NAME\": {\r\n            return {\r\n                ...state,\r\n                data: action.newData\r\n            }\r\n        }\r\n        case 'SEARCH/ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n\r\n        }\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport type actionType = ReturnType<typeof weatherAC> | ReturnType<typeof errorAC>\r\n\r\nexport const weatherAC = (newData: any) => ({\r\n    type: 'SET_CITY_NAME',\r\n    newData\r\n} as const);\r\nexport const errorAC = (error: string) => ({\r\n    type: 'SEARCH/ERROR',\r\n    error\r\n} as const);\r\n\r\nexport const weatherTC = (searchName: string) => (dispatch: Dispatch) => {\r\n    return WeatherAPI.searchCity(searchName)\r\n        .then((res) => {\r\n            dispatch(weatherAC(res.data))\r\n        })\r\n        .catch(() => {\r\n            dispatch(errorAC('Ой! Похоже ты ввел неправильное название города'));\r\n            \r\n        })\r\n\r\n}","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { AppStoreType } from '../redux/store'\r\nimport s from './DataWeather.module.css'\r\n\r\nexport const DataWeather = () => {\r\n    const cityName = useSelector<AppStoreType, string>(store => store.weather.data.name)\r\n    const error = useSelector<AppStoreType, string>(store => store.weather.error)\r\n    const temp = useSelector<AppStoreType, number | null>(store => store.weather.data.main.temp)\r\n    const feels_like = useSelector<AppStoreType, number | null>(store => store.weather.data.main.feels_like)\r\n    const description = useSelector<AppStoreType, string[]>(store => store.weather.data.weather.map(it => it.description))\r\n    return (\r\n        <div className={s.weatherWrap}>\r\n            {error ? <div className={s.error}>{error}</div>  : <div>\r\n                <div className={s.cityName}>{cityName}</div>\r\n                <div className={s.description}>{description}</div>\r\n                <div className={s.temp}>{temp && Math.round(temp) + '°'}</div>\r\n                {\r\n                    feels_like ? <div className={s.feels_like}>Ощущается как {feels_like && Math.round(feels_like) + '°'}</div> : ''\r\n                }\r\n            </div>\r\n            }\r\n\r\n            {/* <div className={s.feels_like}>Ощущается как {feels_like}</div> */}\r\n            {/* <div>{new Date().toLocaleTimeString()}</div> */}\r\n        </div>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/—Pngtree—search vector icon_4017384.03f83f02.png\";","export default __webpack_public_path__ + \"static/media/pngwing.com.9c0997cc.png\";","import React, { ChangeEvent, useState, KeyboardEvent, useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { weatherTC } from '../redux/weatherReducer'\r\nimport { DataWeather } from './DataWeather'\r\nimport s from './Weather.module.css'\r\nimport search from '../common/—Pngtree—search vector icon_4017384.png'\r\nimport pngwing from '../common/pngwing.com.png'\r\n\r\nexport const Weather = () => {\r\n    const [date, setDate] = useState<Date>();\r\n    useEffect(() => {\r\n        setInterval(() => {\r\n            setDate(new Date())\r\n        }, 1000)\r\n    }, [])\r\n\r\n    const dispatch = useDispatch()\r\n    const [searchName, setSearchName] = useState<string>('')\r\n\r\n    const onChangeHendler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setSearchName(e.currentTarget.value)\r\n    }\r\n\r\n    const searchCity = () => {\r\n        dispatch(weatherTC(searchName))\r\n        setSearchName('')\r\n    }\r\n    const onKeyPressHendler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            searchCity()\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className={s.main}>\r\n            <div className={s.searchWrap}>\r\n                <div className={s.logo}>\r\n                    <img src={pngwing} alt=\"logo\"/>\r\n                    <div>your weather</div>\r\n                </div>\r\n\r\n                <div className={s.search}>\r\n                    <input className={s.input} value={searchName} type=\"text\" placeholder={'Введите название города'} onChange={onChangeHendler} onKeyPress={onKeyPressHendler} />\r\n                    <div className={s.button} onClick={searchCity}>\r\n                        <img src={search} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className={s.contentWrap}>\r\n                <DataWeather />\r\n            </div>\r\n            {/* <div>\r\n                <div>{date && date.toLocaleTimeString() }</div>\r\n                <div>{date && date.toLocaleDateString()}</div>\r\n            </div> */}\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport { Weather } from './components/Weather';\n\nconst App = () => {\n  const data = new Date().toLocaleTimeString()\n  return (\n    <div className=\"App\">\n      {\n        data >= '9' || data < '18'\n          ? <div className='day'><Weather /></div>\n          : <div className='night'><Weather /></div>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport {weatherReducer} from \"./weatherReducer\";\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nconst reducers = combineReducers({\r\n    weather: weatherReducer,\r\n\r\n});\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store\r\n\r\nexport type AppStoreType = ReturnType<typeof reducers>\r\n\r\n//@ts-ignore\r\nwindow.store = store; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}